#!/usr/bin/env python3
"""
Script de migraci√≥n para actualizar la base de datos de Sumiller
A√±ade las columnas faltantes: user_name y total_interactions
"""

import sqlite3
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_database():
    """Migra la base de datos a√±adiendo las columnas faltantes."""
    db_dir = Path("./database")
    db_dir.mkdir(exist_ok=True)
    db_path = db_dir / "sumiller.db"
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # Verificar si las columnas existen antes de a√±adirlas
            
            # 1. A√±adir user_name a conversations si no existe
            try:
                cursor.execute("ALTER TABLE conversations ADD COLUMN user_name TEXT")
                logger.info("‚úÖ Columna 'user_name' a√±adida a la tabla 'conversations'")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    logger.info("‚ÑπÔ∏è Columna 'user_name' ya existe en 'conversations'")
                else:
                    raise
            
            # 2. A√±adir total_interactions a user_preferences si no existe
            try:
                cursor.execute("ALTER TABLE user_preferences ADD COLUMN total_interactions INTEGER DEFAULT 0")
                logger.info("‚úÖ Columna 'total_interactions' a√±adida a la tabla 'user_preferences'")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    logger.info("‚ÑπÔ∏è Columna 'total_interactions' ya existe en 'user_preferences'")
                else:
                    raise
            
            # 3. A√±adir user_name a user_preferences si no existe
            try:
                cursor.execute("ALTER TABLE user_preferences ADD COLUMN user_name TEXT")
                logger.info("‚úÖ Columna 'user_name' a√±adida a la tabla 'user_preferences'")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    logger.info("‚ÑπÔ∏è Columna 'user_name' ya existe en 'user_preferences'")
                else:
                    raise
            
            # 4. A√±adir user_name a wine_ratings si no existe
            try:
                cursor.execute("ALTER TABLE wine_ratings ADD COLUMN user_name TEXT")
                logger.info("‚úÖ Columna 'user_name' a√±adida a la tabla 'wine_ratings'")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    logger.info("‚ÑπÔ∏è Columna 'user_name' ya existe en 'wine_ratings'")
                else:
                    raise
            
            # 5. A√±adir favorite_wines a user_preferences si no existe
            try:
                cursor.execute("ALTER TABLE user_preferences ADD COLUMN favorite_wines TEXT")
                logger.info("‚úÖ Columna 'favorite_wines' a√±adida a la tabla 'user_preferences'")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    logger.info("‚ÑπÔ∏è Columna 'favorite_wines' ya existe en 'user_preferences'")
                else:
                    raise
            
            # 6. A√±adir last_session_id a user_preferences si no existe
            try:
                cursor.execute("ALTER TABLE user_preferences ADD COLUMN last_session_id TEXT")
                logger.info("‚úÖ Columna 'last_session_id' a√±adida a la tabla 'user_preferences'")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    logger.info("‚ÑπÔ∏è Columna 'last_session_id' ya existe en 'user_preferences'")
                else:
                    raise
            
            conn.commit()
            logger.info("üéâ Migraci√≥n de base de datos completada exitosamente")
            
    except Exception as e:
        logger.error(f"‚ùå Error durante la migraci√≥n: {e}")
        raise

if __name__ == "__main__":
    migrate_database() 